import * as THREE from 'three';
import { OrbitControls } from 'three/examples/js/controls/OrbitControls';

// Create the scene
const scene = new THREE.Scene();

// Set up the camera with perspective projection
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 2, 5);

// Set up the WebGL renderer
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Add Orbit Controls
const controls = new OrbitControls(camera, renderer.domElement);

// Set up lighting
const ambientLight = new THREE.AmbientLight(0x404040, 1); // Ambient light
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 1); // Directional light
directionalLight.position.set(5, 5, 5); // Light position
scene.add(directionalLight);

// Create the desk (simple cube for now)
const deskGeometry = new THREE.BoxGeometry(2, 0.1, 1);
const deskMaterial = new THREE.MeshPhongMaterial({ color: 0x8B4513 }); // Wood color
const desk = new THREE.Mesh(deskGeometry, deskMaterial);
scene.add(desk);

// Create the mirror
const mirrorGeometry = new THREE.PlaneGeometry(3, 2);
const mirrorMaterial = new THREE.MeshBasicMaterial({ color: 0xaaaaaa, side: THREE.DoubleSide });
const mirror = new THREE.Mesh(mirrorGeometry, mirrorMaterial);
mirror.position.set(0, 1, 3); // Position it slightly above the desk
mirror.rotation.x = Math.PI / 2; // Rotate the mirror to face forward
scene.add(mirror);

// Create a render target to hold the reflection
const renderTarget = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight);
const mirrorCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
mirrorCamera.position.set(0, 2, -5); // Set the camera's position to "reflect" the desk

// Create a material for the mirror that uses the render target
const mirrorReflectMaterial = new THREE.MeshBasicMaterial({
  map: renderTarget.texture, // Use the reflection texture
  side: THREE.DoubleSide
});
mirror.material = mirrorReflectMaterial;

// Animation loop
function animate() {
  requestAnimationFrame(animate);

  // Render the scene to the render target (this is the reflection)
  renderer.setRenderTarget(renderTarget);
  renderer.render(scene, mirrorCamera); // Use the mirror camera to render the scene for reflection

  // Reset the render target to the screen
  renderer.setRenderTarget(null);
  renderer.render(scene, camera); // Render the scene normally

  // Update the controls for camera movement
  controls.update();
}

animate();
const raycaster = new THREE.Raycaster();
const mouse = new THREE.Vector2();

// Listen for mouse click
window.addEventListener('click', onMouseClick, false);

function onMouseClick(event) {
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
  
  raycaster.update(camera, renderer.domElement);
  
  const intersects = raycaster.intersectObjects(scene.children);
  if (intersects.length > 0) {
    // Do something with the clicked object, like changing its texture
  }
}
renderer.shadowMap.enabled = true;
directionalLight.castShadow = true;
pointLight.castShadow = true;

cube.castShadow = true;
cube.receiveShadow = true;
